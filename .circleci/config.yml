version: 2.1

orbs:
  codacy: codacy/base@2.4.1

references:
  circleci_job: &circleci_job
    docker:
      - image: circleci/circleci-cli:0.1.5879
    working_directory: ~/workdir

jobs:
  publish_circleci_artifacts:
    machine: true
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/
      - store_artifacts:
          path: ~/workdir/artifacts/

  pack_and_validate:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: Pack orb
          command: |
            echo "" >> orbs/examples/codacy-coverage-report.yml
            echo "  orbs:" >> orbs/examples/codacy-coverage-report.yml
            echo "    coverage-reporter: codacy/coverage-reporter@$(cat .version)" >> orbs/examples/codacy-coverage-report.yml
            circleci config pack orbs > orb.yml
      - run:
          name: Validate orb
          command: circleci orb validate orb.yml
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "orb.yml"

  publish_dev:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish orb as dev (deleted after 90 days)
          command: circleci orb publish orb.yml codacy/coverage-reporter@dev:$(cat .version) --token $CIRCLE_TOKEN

  publish_prod:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish final orb
          command: circleci orb publish orb.yml codacy/coverage-reporter@$(cat .version) --token $CIRCLE_TOKEN

  package_artifacts:
    docker:
      - image: hairyhenderson/upx:3.94
    working_directory: ~/workdir
    steps:
      - run: apk add ca-certificates
      - attach_workspace:
          at: ~/workdir
      - run: |
          mkdir -p ~/workdir/artifacts/
          mv ~/workdir/target/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/artifacts/
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) ~/workdir/target/graalvm-native-image/codacy-coverage-reporter
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "*"

  test_coverage_script_2:
    docker:
      - image: alpine
      - image: mockserver/mockserver
    working_directory: ~/workdir
    steps:
      - run: |
          apk --no-cache add openssl wget
          wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk
          apk add glibc-2.31-r0.apk
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for mock server
          command: dockerize -wait tcp://localhost:1080 -timeout 1m
      - run:
          name: configure mock server
          command: wget --method=PUT --body-data="$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation
      - attach_workspace:
          at: ~/workdir
      - run: |
          export CODACY_PROJECT_TOKEN=<< parameters.token >>
          export CODACY_TOOL_PATH=$TEST_CODACY_TOOL_PATH
          sh get.sh report --commit-uuid $TEST_COMMIT_UUID -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080

workflows:
  version: 2
  compile_test_deploy:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - pack_and_validate:
          context: CodacyCircleCI
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: populate_cache
          cmd: sbt ";set scalafmtUseIvy in ThisBuild := false;update"
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: check_fmt
          cmd: sbt ";scalafmt::test;test:scalafmt::test;sbt:scalafmt::test"
          requires:
            - populate_cache
      - codacy/sbt:
          name: compile
          cmd: sbt compile
          requires:
            - check_fmt
      - codacy/sbt:
          name: test_and_coverage
          cmd: |
            if [ -z ${CODACY_PROJECT_TOKEN+x} ]; then
              echo "CODACY_PROJECT_TOKEN not found. Skipping send coverage to Codacy."
              sbt test
            else
              sbt ";clean;coverage;test;coverageReport;coverageAggregate;codacyCoverage"
            fi
          requires:
            - compile
      - codacy/sbt:
          name: create_artifacts
          cmd: |
            sbt "assembly;graalvm-native-image:packageBin"
          persist_to_workspace: true
          requires:
            - test_and_coverage
      - test_coverage_script_2:
          name: it_test_coverage_script
          token: $TEST_CODACY_PROJECT_TOKEN
          requires:
            - create_artifacts
      - package_artifacts:
          requires:
            - it_test_coverage_script
      - publish_circleci_artifacts:
          requires:
            - it_test_coverage_script
          filters:
            branches:
              only:
                - master
      #TODO: Add bintray orb
      - codacy/shell:
          name: publish_bintray
          cmd: |
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-linux
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-assembly-$(cat .version).jar -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-assembly.jar
            curl -X POST -ucodacy-ci:$BINTRAY_API_KEY https://api.bintray.com/content/codacy/Binaries/codacy-coverage-reporter/$(cat .version)/publish
          filters:
            branches:
              only:
                - master
          context: CodacyBintray
          requires:
            - package_artifacts
      - codacy/publish_ghr:
          name: publish_ghr
          path: ~/workdir/artifacts/
          context: CodacyGitHub
          filters:
            branches:
              only:
                - master
          requires:
            - package_artifacts
      - publish_dev:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              ignore:
              - master
      - publish_prod:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              only:
                - master
