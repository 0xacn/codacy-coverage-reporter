version: 2.1

orbs:
  codacy: codacy/base@dev:4.1.0-sbtwindowssupport.8.570dcbf

references:
  circleci_job: &circleci_job
    docker:
      - image: circleci/circleci-cli:0.1.5879
    working_directory: ~/workdir

commands:
  run_coverage_reporting:
    description: "Runs the coverage reporting using the mock-server as API"
    parameters:
      executor:
        type: string
      error_code:
        type: integer
        default: 0
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: test coverage reporting
          command: |
            export CODACY_PROJECT_TOKEN=$TEST_CODACY_PROJECT_TOKEN
            set +e
            mkdir -p .codacy-coverage
            cp "$HOME/workdir/artifacts/codacy-coverage-reporter-linux-$(cat $HOME/workdir/.version)" ".codacy-coverage/codacy-coverage-reporter"
            # the following line ensure that we are using the cached binary
            export CODACY_REPORTER_VERSION=inexistent
            << parameters.executor >> get.sh report --commit-uuid $TEST_COMMIT_UUID  -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            export ERROR_CODE=$?
            if [ $ERROR_CODE -ne << parameters.error_code >> ]; then echo "expected an error code << parameters.error_code >> and got $ERROR_CODE instead"; exit 1; fi
            echo "test completed with the expected error code: << parameters.error_code >>"

jobs:
  publish_circleci_artifacts:
    machine: true
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/
      - store_artifacts:
          path: ~/workdir/artifacts/

  pack_and_validate:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: Pack orb
          command: |
            echo "" >> orbs/examples/codacy-coverage-report.yml
            echo "  orbs:" >> orbs/examples/codacy-coverage-report.yml
            echo "    coverage-reporter: codacy/coverage-reporter@$(cat .version)" >> orbs/examples/codacy-coverage-report.yml
            circleci config pack orbs > orb.yml
      - run:
          name: Validate orb
          command: circleci orb validate orb.yml
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "orb.yml"

  publish_dev:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish orb as dev (deleted after 90 days)
          command: circleci orb publish orb.yml codacy/coverage-reporter@dev:$(cat .version) --token $CIRCLE_TOKEN

  publish_prod:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish final orb
          command: circleci orb publish orb.yml codacy/coverage-reporter@$(cat .version) --token $CIRCLE_TOKEN

  package_artifacts:
    docker:
      - image: hairyhenderson/upx:3.94
    working_directory: ~/workdir
    steps:
      - run: apk add ca-certificates
      - attach_workspace:
          at: ~/workdir
      - run: |
          ls -al ~/workdir/tmp-artifacts
          
          mkdir -p ~/workdir/artifacts/
          mv ~/workdir/tmp-artifacts/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/artifacts/
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) ~/workdir/tmp-artifacts/codacy-coverage-reporter-linux
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-darwin-$(cat .version) ~/workdir/tmp-artifacts/codacy-coverage-reporter-darwin
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-win-$(cat .version).exe ~/workdir/tmp-artifacts/codacy-coverage-reporter-win.exe
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - artifacts/*

  it_coverage_script_alpine:
    docker:
      - image: alpine:3.9.5
      - image: mockserver/mockserver
    working_directory: ~/workdir
    steps:
      - run:
          name: install glibc
          command: |
            apk --no-cache add openssl wget
            wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk
            apk add glibc-2.31-r0.apk
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: wget --retry-connrefused --method=PUT http://localhost:1080/mockserver/status
      - run:
          name: configure mock server
          command: wget --method=PUT --body-data="$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation
      - run_coverage_reporting:
          executor: sh
          error_code: 0

  it_coverage_script_ubuntu:
    docker:
      - image: cimg/base:2020.01 # ubuntu based image
      - image: mockserver/mockserver
    working_directory: ~/workdir
    parameters:
      error_code:
        type: integer
      config_path:
        type: string
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: timeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
      - run:
          name: configure mock server
          command: curl -v -X PUT localhost:1080/mockserver/expectation -d "$(cat << parameters.config_path >>)"
      - run_coverage_reporting:
          executor: bash
          error_code: << parameters.error_code >>

  it_coverage_script_macosx:
    executor: codacy/osx
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: prepare the environment
          command: |
            brew install mockserver coreutils
            mkdir -p .codacy-coverage
            cp $HOME/workdir/artifacts/codacy-coverage-reporter-darwin-$(cat $HOME/workdir/.version) .codacy-coverage/codacy-coverage-reporter
      - run:
          name: test on osx
          command: |
            echo "Start and provision the mockserver"
            nohup mockserver -logLevel INFO -serverPort 1080 &
            gtimeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
            curl -X PUT -d "$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation
            echo "Run the test"
            set +e
            # the following line ensure that we are using the cached binary
            export CODACY_REPORTER_VERSION=inexistent
            export CODACY_PROJECT_TOKEN='TEST_CODACY_PROJECT_TOKEN'
            export TEST_CODACY_REPORT_PATH='integration-tests/test_dotcover.xml'
            sh get.sh report --commit-uuid 'TEST_COMMIT_UUID'  -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            export ERROR_CODE=$?
            if [ $ERROR_CODE -ne 0 ]; then echo "expected an error code 0 and got $ERROR_CODE instead"; exit 1; fi
            echo "test completed with the expected error code: 0"

  it_coverage_script_windows:
    executor: codacy/win
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: prepare the environment
          command: |
            https://search.maven.org/remotecontent?filepath=org/mock-server/mockserver-netty/5.10.0/mockserver-netty-5.10.0-jar-with-dependencies.jar
            Invoke-WebRequest -Uri "https://search.maven.org/remotecontent?filepath=org/mock-server/mockserver-netty/5.10.0/mockserver-netty-5.10.0-jar-with-dependencies.jar" -OutFile "mockserver.jar"
            mkdir -p .codacy-coverage
            cp $HOME/workdir/artifacts/codacy-coverage-reporter-win-$(cat $HOME/workdir/.version).exe .codacy-coverage/codacy-coverage-reporter
      - run:
          name: test on windows
          command: |
            echo "Start and provision the mockserver"
            Start-Job { java -jar mockserver.jar -serverPort 1080 }

            cmd.exe /c timeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
            curl -X PUT -d "$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation

            echo "Run the test"
            
            # the following line ensure that we are using the cached binary
            export CODACY_REPORTER_VERSION=inexistent
            export CODACY_PROJECT_TOKEN=$TEST_CODACY_PROJECT_TOKEN
            sh get.sh report --commit-uuid $TEST_COMMIT_UUID  -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            export ERROR_CODE=$?
            if [ $ERROR_CODE -ne 0 ]; then echo "expected an error code 0 and got $ERROR_CODE instead"; exit 1; fi
            echo "test completed with the expected error code: 0"

workflows:
  version: 2
  compile_test_deploy:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - pack_and_validate:
          context: CodacyCircleCI
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: populate_cache
          cmd: sbt "set scalafmtUseIvy in ThisBuild := false;update"
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: check_fmt
          cmd: sbt "scalafmt::test;test:scalafmt::test;sbt:scalafmt::test"
          requires:
            - populate_cache
      - codacy/sbt:
          name: compile
          cmd: sbt compile
          requires:
            - check_fmt
      - codacy/sbt:
          name: test_and_coverage
          cmd: |
            if [ -z ${CODACY_PROJECT_TOKEN+x} ]; then
              echo "CODACY_PROJECT_TOKEN not found. Skipping send coverage to Codacy."
              sbt test
            else
              sbt clean coverage test coverageReport
              sbt coverageAggregate
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report --skip
              sbt "it:test"
            fi
          requires:
            - compile
      - codacy/sbt:
          name: create_artifacts
          cmd: |
            sbt "assembly;graalvm-native-image:packageBin"
            mkdir -p ~/workdir/tmp-artifacts
            mv target/graalvm-native-image/codacy-coverage-reporter ~/workdir/tmp-artifacts/codacy-coverage-reporter-linux
            mv target/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/tmp-artifacts
          persist_to_workspace: true
          requires:
            - test_and_coverage
      - codacy/sbt_osx:
          name: create_artifacts_for_osx
          cmd: |
            # TODO GraalVM version should be in a single place
            export GRAAL_VERSION=20.0.0
            export TARGET_GRAAL="./target/graalvm-$GRAAL_VERSION.tar.gz"
            mkdir -p target
            if [[ ! -e $TARGET_GRAAL ]]; then
              curl -L "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-$GRAAL_VERSION/graalvm-ce-java11-darwin-amd64-$GRAAL_VERSION.tar.gz" -o "$TARGET_GRAAL"
            fi
            sudo tar -xf $TARGET_GRAAL -C /Library/Java/JavaVirtualMachines
            /usr/libexec/java_home -V
            export PATH="$PATH:/Library/Java/JavaVirtualMachines/graalvm-ce-java11-$GRAAL_VERSION/Contents/Home/bin"
            sudo gu install native-image
            sbt "set graalVMNativeImageGraalVersion := None; set graalVMNativeImageOptions --= Seq(\"--static\", \"-H:UseMuslC=/opt/graalvm/stage/resources/bundle/\"); graalvm-native-image:packageBin"
            mkdir -p  ~/workdir/tmp-artifacts
            mv $HOME/workdir/target/graalvm-native-image/codacy-coverage-reporter $HOME/workdir/tmp-artifacts/codacy-coverage-reporter-darwin
          persist_to_workspace: true
          persist_to_workspace_path: "tmp-artifacts/codacy-coverage-reporter-darwin"
          requires:
            - test_and_coverage
      - codacy/sbt_win:
          name: create_artifacts_for_win
          cmd: |
            # thanks to: https://msitko.pl/blog/2020/03/05/native-image-on-windows.html
            choco install visualstudio2017-workload-vctools

            # please kill me: https://help.appveyor.com/discussions/questions/18777-how-to-use-vcvars64bat-from-powershell
            cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\vc\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"

            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
              if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
              }
            }

            # TODO GraalVM version should be in a single place
            Set-Item -Path Env:GRAAL_VERSION -Value "20.0.0"
            Set-Item -Path Env:TARGET_GRAAL -Value ("./target/graalvm-" + $Env:GRAAL_VERSION + ".tar.gz")
            mkdir -p target
            curl.exe -L "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-$Env:GRAAL_VERSION/graalvm-ce-java11-windows-amd64-$Env:GRAAL_VERSION.zip" -o "$Env:TARGET_GRAAL"
            
            mkdir -p graalvm/
            unzip $Env:TARGET_GRAAL -d graalvm/
            
            Set-Item -Path Env:Path -Value ("$PWD\graalvm\graalvm-ce-java11-${Env:GRAAL_VERSION}\bin;" + $Env:Path)
            Set-Item -Path Env:JavaHome -Value "$PWD\graalvm\graalvm-ce-java11-${Env:GRAAL_VERSION}"

            java -version

            gu.cmd install native-image
            # Seems like the first time sbt always fails ...
            (sbt compile) -or (exit 0)
            sbt winGraalBuild

            # TODO remove-me
            dir $HOME/workdir/target/graalvm-native-image

            mkdir -p  ~/workdir/tmp-artifacts
            mv.exe $HOME/workdir/target/graalvm-native-image/codacy-coverage-reporter.exe $HOME/workdir/tmp-artifacts/codacy-coverage-reporter-win.exe
          persist_to_workspace: true
          persist_to_workspace_path: "tmp-artifacts/codacy-coverage-reporter-win.exe"
          requires:
            - test_and_coverage
      - package_artifacts:
          requires:
            - create_artifacts
            - create_artifacts_for_osx
            - create_artifacts_for_win
      - it_coverage_script_macosx:
          requires:
            - package_artifacts
      - it_coverage_script_windows:
          requires:
            - package_artifacts
      - it_coverage_script_alpine:
          requires:
            - package_artifacts
      - it_coverage_script_ubuntu:
          name: it_coverage_script_ubuntu_success
          error_code: 0
          config_path: integration-tests/mock-server-config.json
          requires:
            - package_artifacts
      - it_coverage_script_ubuntu:
          name: it_coverage_script_ubuntu_failure
          error_code: 1
          config_path: integration-tests/mock-server-error-config.json
          requires:
            - package_artifacts
      - publish_circleci_artifacts:
          requires:
            - it_coverage_script_macosx
            - it_coverage_script_windows
            - it_coverage_script_alpine
            - it_coverage_script_ubuntu_success
            - it_coverage_script_ubuntu_failure
          filters:
            branches:
              only:
                - master
      #TODO: Add bintray orb
      - codacy/shell:
          name: publish_bintray
          cmd: |
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-linux
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-darwin-$(cat .version) -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-darwin
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-assembly-$(cat .version).jar -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-assembly.jar
            curl -X POST -ucodacy-ci:$BINTRAY_API_KEY https://api.bintray.com/content/codacy/Binaries/codacy-coverage-reporter/$(cat .version)/publish
          filters:
            branches:
              only:
                - master
          context: CodacyBintray
          requires:
            - it_coverage_script_macosx
            - it_coverage_script_alpine
            - it_coverage_script_ubuntu_success
            - it_coverage_script_ubuntu_failure
      - codacy/publish_ghr:
          name: publish_ghr
          path: ~/workdir/artifacts/
          context: CodacyGitHub
          filters:
            branches:
              only:
                - master
          requires:
            - it_coverage_script_macosx
            - it_coverage_script_alpine
            - it_coverage_script_ubuntu_success
            - it_coverage_script_ubuntu_failure
      - publish_dev:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              ignore:
              - master
      - publish_prod:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              only:
                - master
